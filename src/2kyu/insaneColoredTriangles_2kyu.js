// Problem Description
// A coloured triangle is created from a row of colours, each of which is red, green or blue. Successive rows, each containing one fewer colour than the last, are generated by considering the two touching colours in the previous row. If these colours are identical, the same colour is used in the new row. If they are different, the missing colour is used in the new row. This is continued until the final row, with only a single colour, is generated.

// For example, different possibilities are:

// Colour here:            G G        B G        R G        B R
// Becomes colour here:     G          R          B          G
// With a bigger example:

// R R G B R G B B
//  R B R G B R B
//   G G B R G G
//    G R G B G
//     B B R R
//      B G R
//       R B
//        G
// You will be given the first row of the triangle as a string and its your job to return the final colour which would appear in the bottom row as a string. In the case of the example above, you would be given 'RRGBRGBB', and you should return 'G'.

// Constraints
// 1 <= length(row) <= 10 ** 5

// The input string will only contain the uppercase letters 'B', 'G' or 'R'.

export function triangle(row) {
  if (row.length < 1 || row.length > Math.pow(10, 5)) {
    console.log("constraint fired");
    return;
  }
  return getRowForLongInput(row)[0];
}

function getMergedColor(a, b) {
  if (a === b) {
    return a;
  } else if (a === "G" || b === "G") {
    return a === "R" || b === "R" ? "B" : "R";
  } else return "G";
}

function findLargestPowerOf3LessThan(size) {
  let power = 0;
  while (Math.pow(3, power) < size) power++;
  return power - 1;
}

function getRowForShortInput(row) {
  if (row.length === 1) return row;

  let nextRow = "";
  for (let i = 0; i < row.length - 1; i++) {
    nextRow += getMergedColor(row[i], row[i + 1]);
  }
  return getRowForShortInput(nextRow);
}

function getRowForLongInput(row) {
  if (row.length === 1) return row;

  const n = Math.pow(3, findLargestPowerOf3LessThan(row.length));

  for (let i = 0; i < row.length / n; i++) {
    let nextRow = "";
    for (let j = 0; j < row.length - n; j++) {
      nextRow += getMergedColor(row[j], row[j + n]);
    }
    row = nextRow;
  }

  return row.length >= 4 ? getRowForLongInput(row) : getRowForShortInput(row);
}
